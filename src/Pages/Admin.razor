@page "/admin"
@using AzureNamingTool.Helpers;
@using AzureNamingTool.Models;
@using System.Runtime.Caching;
@using AzureNamingTool.Services;
@using Blazored.Toast.Configuration;
@using Microsoft.AspNetCore.Html
@using Microsoft.Extensions.Logging
@using System.Reflection;
@inject IJSRuntime JsRuntime
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage storage

<PageTitle>Azure Naming Tool - Admin</PageTitle>
<div class="card  @theme.ThemeStyle">
    <div class="card-body">
        <!-- Pop it above the backdrop -->
        <div class="@theme.ThemeStyle">
            <div style="float:left;">
                <h1>
                    Admin
                </h1>
            </div>
            @if (admin)
            {
                <div style="float:right;">
                    <button class="btn btn-secondary" title="Instructions" @onclick="@(e => ModalHelper.ShowInformationModal(Modal!, theme, "bg-navcolor", "Admin", String.Empty, "adminconfigurationinstructions", admin))">
                        <span class="oi oi-document" aria-hidden="true"></span> Documentation
                    </button>
                </div>
            }
            <div style="clear:both;"></div>
            <div>
                @if (!admin)
                {
                    <p>
                        Enter the Global Admin Password to configure the Azure Naming Tool site.
                    </p>
                    <div class="form-group">
                        <label for="password" style="font-weight:bold">Global Admin Password</label>
                        <input title="Password" class="form-control mb-3" type="password" @onchange="@((ui) => { SetFormValue("login",(string)ui.Value!);})" />
                    </div>
                }
                else
                {
                    <p>
                        This page allows you to security settings, view cache data, and site configurations for the Azure Naming Tool.
                    </p>
                    <div class="card mb-3" style="width:auto;">
                        <div class="card-header bg-default text-dark">
                            <a id="versiondetailslink" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#versiondetails" role="button" aria-expanded="false" aria-controls="versiondetails">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> <span class="fw-bold">Version Details</span>
                            </a>
                        </div>
                        <div class="collapse show card card-body @theme.ThemeStyle" id="versiondetails">
                            <div class="mb-3">
                                <span class="fw-bold">Current version:</span> @appversion (<a href="@releasenotesurl" target="_blank">Release Notes</a>)
                            </div>
                            @if (!String.IsNullOrEmpty(versionalert))
                            {
                                <div class="alert alert-warning" role="alert">
                                    <div>
                                        @((MarkupString)versionalert)
                                    </div>
                                </div>
                            }
                            @if ((currentuser == "GlobalAdmin") && (GeneralHelper.IsNotNull(environmentvariables)))
                            {
                                <div class="card mb-3" style="width:auto;">
                                    <div class="card-header bg-default text-dark">
                                        <a id="environmentvariableslink" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#environmentvariables" role="button" aria-expanded="false" aria-controls="environmentvariables">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> <span class="fw-bold">Environment Details</span>
                                        </a>
                                    </div>
                                    <div class="collapse card card-body @theme.ThemeStyle" id="environmentvariables">
                                        <div class="mb-3">
                                            <ul>
                                                @foreach (var variable in environmentvariables)
                                                {
                                                    <li><span class="fw-bold">@variable.Key:</span> @variable.Value</li>
                                                }
                                            </ul>
                                        </div>

                                    </div>
                                </div>
                            }
                            <div class="mb-3">
                                <button type="button" class="btn btn-success" @onclick="@(e => SubmitIssue("feature"))" title="Feature Request">Feature Request</button>
                                <button type="button" class="btn btn-danger" @onclick="@(e => SubmitIssue("bug"))" title="Submit a bug">Submit a bug</button>
                            </div>
                        </div>
                    </div>
                    <div class="card mb-3">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="text-decoration-none text-white" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#security" role="button" aria-expanded="false" aria-controls="security">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Security
                            </a>
                        </h5>
                        <div class="collapse show card card-body @theme.ThemeStyle" id="security">
                            @if (currentuser == "GlobalAdmin")
                            {
                                <div class="card mb-3">
                                    <div class="card-header bg-default text-dark">
                                        <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#updatepassword" role="button" aria-expanded="false" aria-controls="updatepassword">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Global Admin Password
                                        </a>
                                    </div>
                                    <div class="collapse show card card-body @theme.ThemeStyle" id="updatepassword">
                                        <p>
                                            Enter a new <span class="fw-bold">Global Admin</span> password for the site.
                                        </p>
                                        <p class="fw-bold">Requirements</p>
                                        <ul>
                                            <li>Contain a number</li>
                                            <li>Contain one upper case letter</li>
                                            <li>Be at least 8 characters</li>
                                        </ul>
                                        <div class="form-group">
                                            <input title="New Password" id="newpassword" class="form-control  mb-3" type="password" @onchange="@((ui) => { SetFormValue("password",(string)ui.Value!);})" />
                                            <button title="Save Password" type="button" disabled="@disabled" class="btn btn-success" @onclick="@(e => AdminFormAction("password"))">Save</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="card mb-3" style="width:auto;">
                                    <div class="card-header bg-default text-dark">
                                        <a id="apikeyslink" class="link-dark text-decoration-none" data-bs-toggle="collapse" href="#apikeys" role="button" aria-expanded="false" aria-controls="apikeys">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> <span class="fw-bold">API Keys</span>
                                        </a>
                                    </div>
                                    <div class="collapse show card card-body @theme.ThemeStyle" id="apikeys">
                                        <div class="card mb-3">
                                            <div class="card-header bg-default text-dark">
                                                <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#updateapikey" role="button" aria-expanded="false" aria-controls="updateapikey">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Full Access API Key
                                                </a>
                                            </div>
                                            <div class="collapse show  card card-body @theme.ThemeStyle" id="updateapikey">
                                                <p>
                                                    The current <span class="fw-bold">Full Access API Key</span> is displayed. This key provides <span class="fw-bold">full access</span> to the API.
                                                </p>
                                                <p>
                                                    Click <span class="fw-bold">Generate</span> to create a new random <span class="fw-bold">Full Access API Key</span>, or update the text to the desired value.
                                                </p>
                                                <div class="form-group">
                                                    <input title="Full Access API Key" id="currentapikey" class="form-control mb-3" type="text" @onchange="@((ui) => { SetFormValue("apikey",(string)ui.Value!);})" value="@currentapikey" />
                                                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("apikeysave"))" title="Save Full Access API Key">Save</button>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("apikeygenerate"))" title="Generate Full Access API Key">Generate</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card mb-3">
                                            <div class="card-header bg-default text-dark">
                                                <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#updatereadonlyapikey" role="button" aria-expanded="false" aria-controls="updatereadonlyapikey">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Read-Only API Key
                                                </a>
                                            </div>
                                            <div class="collapse show  card card-body @theme.ThemeStyle" id="updatereadonlyapikey">
                                                <p>
                                                    The current <span class="fw-bold">Read-Only API Key</span> is displayed. This key provides <span class="fw-bold">read-only</span> access to the API (GET operations only).
                                                </p>
                                                <p>
                                                    Click <span class="fw-bold">Generate</span> to create a new random <span class="fw-bold">Read-Only API Key</span>, or update the text to the desired value.
                                                </p>
                                                <div class="form-group">
                                                    <input title="Read-Only API Key" id="currentreadonlyapikey" class="form-control mb-3" type="text" @onchange="@((ui) => { SetFormValue("readonlyapikey",(string)ui.Value!);})" value="@currentreadonlyapikey" />
                                                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("readonlyapikeysave"))" title="Save Read-Only API Key">Save</button>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("readonlyapikeygenerate"))" title="Generate Read-Only API Key">Generate</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <span style="font-style:italic;">Log in with the Global Admin password to update these settings.</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card mb-3">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="text-decoration-none text-white" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#identityprovidersettings" role="button" aria-expanded="false" aria-controls="identityprovidersettings">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Identity Provider Settings
                            </a>
                        </h5>
                        <div class="collapse show  card card-body @theme.ThemeStyle" id="identityprovidersettings">
                            @if (currentuser == "GlobalAdmin")
                            {
                                <p>
                                    This section is used to configure the <span class="fw-bold">Identity Provider</span> settings for the site if authentication is implemented. The Azure Naming Tool is designed to work with <span class="fw-bold"><a href="https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization" target="_blank">Azure App Service Authentication</a></span>, by default. If the Azure Naming Tool is configured to identify users, the site will track user activity. Users can also be designated as Admins using the <span class="fw-bold">Admin Users</span> configuration.
                                </p>
                                <p>
                                    You can learn more about the new Identity Provider Integration <a href="https://soltisweb.com/blog/detail/2023-06-azurenamingtool-identityproviderintegrationdeepdive" target="_blank"><span class="fw-bold">HERE</span></a>.
                                </p>
                                @if (!String.IsNullOrEmpty(currentidentityprovider))
                                {
                                    <div class="mb-3">
                                        <p class="alert alert-success alert-dismissible fade show" role="alert">
                                            <span class="fw-bold">Azure App Service Authentication Enabled!</span><br /><br />
                                            <span class="fw-bold">Current Identity provider:</span> @currentidentityprovider.ToUpper()<br /><br />
                                            <span class="fw-bold">Default Idenitty Header Name:</span> X-MS-CLIENT-PRINCIPAL-NAME
                                        </p>
                                    </div>
                                }
                                <div class="card mb-3">
                                    <div class="card card-header bg-default text-dark" style="font-weight:bold;">
                                        <a id="identityheadername" class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;" href="#identityheadername" role="button" aria-expanded="false" aria-controls="identityheadername">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Identity Header Name
                                        </a>
                                    </div>
                                    <div class="collapse show card card-body @theme.ThemeStyle" id="identityheadername">
                                        <p>
                                            This setting is used to identify site users when authenticating using an Identity provider. Authentication using an Identity provider will often inject headers into the request. The site will check for the specified header name and assign the value as the user's identity. This value will be used to log user activity.
                                        </p>
                                        <div class="form-group mb-3">
                                            <input title="Identity Header Name" id="currentidentityheadername" class="form-control mb-3" type="text" @onchange="@((ui) => { SetFormValue("identityheadername",(string)ui.Value!);})" value="@currentidentityheadername" />
                                            <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("identityheadernamesave"))" title="Save Identity Header Name">Save</button>
                                        </div>
                                        <p class="alert alert-info" role="alert">
                                            <span class="fw-bold">NOTE</span><br />
                                            The Azure Naming Tool is configured for <span class="fw-bold"><a href="https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization" target="_blank">Azure App Service Authentication</a></span> using the <a href="https://learn.microsoft.com/en-us/azure/app-service/configure-authentication-user-identities#access-user-claims-in-app-code" target="_blank"><span class="fw-bold">X-MS-CLIENT-PRINCIPAL-NAME</span></a> header name. If using a different Identity provider, update the setting to the header name that contains the user's id.
                                        </p>
                                    </div>
                                </div>
                                <div class="card mb-3">
                                    <div class="card card-header bg-default text-dark" style="font-weight:bold;">
                                        <a id="adminusers" class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;" href="#adminusers" role="button" aria-expanded="false" aria-controls="adminusers">
                                            <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Admin Users
                                        </a>
                                    </div>
                                    <div class="collapse show card card-body @theme.ThemeStyle" id="adminusers">
                                        <div class="mb-3">
                                            <p>
                                                When authenticating users with an Identity provider, the <span class="fw-bold">Identity Header Name</span> setting can be used to idenity site users. Enter the user id below to assign the user as an <span class="fw-bold">Admin</span> for the Azure Naming Tool.
                                            </p>
                                            @if (!String.IsNullOrEmpty(currentidentityprovider))
                                            {
                                                @switch (currentidentityprovider.ToLower())
                                                {
                                                    case "aad":
                                                        <p class="alert alert-info alert-dismissible fade show" role="alert">
                                                            When using <span class="fw-bold">@currentidentityprovider.ToUpper()</span> for Azure App Service Authentication, the <span class="fw-bold">X-MS-CLIENT-PRINCIPAL-NAME</span> header value will be the user's email address.<br /><br /><span class="fw-bold">Example:</span> example@xyz.com<br /><br />This value should be used to designate the user as an <span class="fw-bold">Admin</span>.
                                                        </p>
                                                        break;
                                                    case "github":
                                                        <p class="alert alert-info alert-dismissible fade show" role="alert">
                                                            When using <span class="fw-bold">@currentidentityprovider.ToUpper()</span> for Azure App Service Authentication, the <span class="fw-bold">X-MS-CLIENT-PRINCIPAL-NAME</span> header value will be the user's name.<br /><br /><span class="fw-bold">Example:</span> John Smith)<br /><br />This value should be used to designate the user as an <span class="fw-bold">Admin</span>.
                                                        </p>
                                                        break;
                                                    case "google":
                                                        <p class="alert alert-info alert-dismissible fade show" role="alert">
                                                            When using <span class="fw-bold">@currentidentityprovider.ToUpper()</span> for Azure App Service Authentication, the <span class="fw-bold">X-MS-CLIENT-PRINCIPAL-NAME</span> header value will be the user's email address.<br /><br /><span class="fw-bold">Example:</span>: example@gmail.com<br /><br />This value should be used to designate the user as an <span class="fw-bold">Admin</span>.
                                                        </p>
                                                        break;
                                                }
                                            }
                                        </div>
                                        <div class="mb-3">
                                            <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("adminuseradd"))" title="Add Admin User">
                                                <span class="oi oi-plus" aria-hidden="true"></span> Add Admin User
                                            </button>
                                        </div>
                                        @if (GeneralHelper.IsNotNull(servicesData.AdminUsers))
                                        {
                                            @if (servicesData.AdminUsers.Count > 0)
                                            {
                                                <div class="table-responsive">
                                                    <table class="table @theme.ThemeStyle">
                                                        <thead>
                                                            <tr>
                                                                <th>Name</th>
                                                                <th>Actions</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @if (GeneralHelper.IsNotNull(servicesData.AdminUsers))
                                                            {
                                                                @foreach (var item in @servicesData.AdminUsers)
                                                                {
                                                                    <tr>
                                                                        <td>@item.Name</td>
                                                                        <td>
                                                                            @if (GeneralHelper.NormalizeName(currentuser, true) != GeneralHelper.NormalizeName(@item.Name, true))
                                                                            {
                                                                                <button type="button" class="btn btn-danger" @onclick="@(e => AdminFormAction("adminuserdelete",item.Id))" title="Delete">
                                                                                    <span class="oi oi-x" aria-hidden="true"></span>
                                                                                </button>
                                                                            }
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <p style="font-style:italic;">There currently no assigned admin users.</p>
                                            }
                                        }
                                        else
                                        {
                                            <p style="font-style:italic;">There currently no assigned admin users.</p>
                                        }
                                        <p class="alert alert-warning">
                                            <span class="fw-bold">NOTE</span><br />
                                            Added users will need to close their browser and re-open the site for the change to take effect.
                                        </p>

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <span style="font-style:italic;">Log in with the Global Admin password to update these settings.</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card mb-3">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="text-decoration-none text-white" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#cache" role="button" aria-expanded="false" aria-controls="cache">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Cache
                            </a>
                        </h5>
                        <div class="collapse show  card card-body @theme.ThemeStyle" id="cache">
                            <p>
                                The tool uses caching for data to improve performance. Click <span class="fw-bold">Clear</span> to clear all cached data.
                            </p>
                            <div class="form-group">
                                <p>
                                    <button type="button" class="btn btn-primary" @onclick="@(e => AdminFormAction("viewcachedata"))" title="View Cache Data">View Cache Data</button>
                                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("clearcache"))" title="Clear Cache">Clear Cache Data</button>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="card mb-3">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="text-decoration-none text-white" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#sitesettings" role="button" aria-expanded="false" aria-controls="sitesettings">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Site Settings
                            </a>
                        </h5>
                        <div class="collapse show card card-body @theme.ThemeStyle" id="sitesettings">
                            <div class="card mb-3" style="width:auto;">
                                <div class="card-header bg-default text-dark">
                                    <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#duplicatenames" role="button" aria-expanded="false" aria-controls="duplicatenames">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Allow Duplicate Names
                                    </a>
                                </div>
                                <div class="collapse show card card-body @theme.ThemeStyle" id="duplicatenames">
                                    <div class="mb-3">
                                        <p>
                                            By default, the Azure Naming Tool prevents duplicate resource names from being generated. This setting can be used to allow duplicate names.
                                        </p>
                                    </div>
                                    <div>
                                        <label class="switch" title="Duplicate Names Allowed">
                                            <input type="checkbox" checked="@duplicatenamesallowed" @oninput='args => SettingChanged(args, "duplicatenamesallowed")'>
                                            <span class="slider round"></span>
                                        </label>
                                        <span class="align-text-top"> Enable</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-3" style="width:auto;">
                                <div class="card-header bg-default text-dark">
                                    <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#autoincrementresourceinstance" role="button" aria-expanded="false" aria-controls="resourcetypeediting">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Auto-Increment Resource Instance
                                    </a>
                                </div>
                                <div class="collapse show card card-body @theme.ThemeStyle" id="autoincrementresourceinstance">
                                    <div class="mb-3">
                                        <p>
                                            If enabled, this setting will increment the <span class="fw-bold">Resource Instance</span> value to next number for the generated resource type name.
                                        </p>
                                    </div>
                                    <div>
                                        <label class="switch" title="Auto-Increment Resource Instance">
                                            <input type="checkbox" checked="@autoincrementresourceinstance" @oninput='args => SettingChanged(args, "autoincrementresourceinstance")'>
                                            <span class="slider round"></span>
                                        </label>
                                        <span class="align-text-top"> Enable</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-3" style="width:auto;">
                                <div class="card-header bg-default text-dark">
                                    <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#resourcetypeediting" role="button" aria-expanded="false" aria-controls="resourcetypeediting">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Resource Type Editing
                                    </a>
                                </div>
                                <div class="collapse show card card-body @theme.ThemeStyle" id="resourcetypeediting">
                                    <div class="mb-3">
                                        <p>
                                            By default, <span class="fw-bold">Resource Type Validation</span> is configured to match the Azure portal. These values can be overriden by enabling the following setting.
                                        </p>
                                    </div>
                                    <div>
                                        <label class="switch" title="Resource Type Editing Enabled">
                                            <input type="checkbox" checked="@resourcetypeeditingallowed" @oninput='args => SettingChanged(args, "resourcetypeeditingallowed")'>
                                            <span class="slider round"></span>
                                        </label>
                                        <span class="align-text-top"> Enable</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-3" style="width:auto;">
                                <div class="card-header bg-default text-dark">
                                    <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#connectivitycheck" role="button" aria-expanded="false" aria-controls="connectivitycheck">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Connectivity Check
                                    </a>
                                </div>
                                <div class="collapse show card card-body @theme.ThemeStyle" id="connectivitycheck">
                                    <div class="mb-3">
                                        <p>
                                            The Azure Naming Tool will verify the tool has internet connectivity to enable update features. Use this setting to disable the connectivity check functionality.
                                        </p>
                                    </div>
                                    <div>
                                        <label class="switch" title="Connectivity Check Enabled">
                                            <input type="checkbox" checked="@connectivitycheckenabled" @oninput='args => SettingChanged(args, "connectivitycheckenabled")'>
                                            <span class="slider round"></span>
                                        </label>
                                        <span class="align-text-top"> Enable</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-3" style="width:auto;">
                                <div class="card-header bg-default text-dark">
                                    <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#generationwebhook" role="button" aria-expanded="false" aria-controls="generationwebhook">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Generation Webhook
                                    </a>
                                </div>
                                <div class="collapse show card card-body @theme.ThemeStyle" id="generationwebhook">
                                    <div class="mb-3">
                                        <p>
                                            The Azure Naming Tool can post generated names to a webhook. This can be used to integrate with other systems. Enter a valid URL below to save the webhook setting.
                                        </p>
                                        <p>
                                            Generated names will be posted using the <span class="fw-bold"><a href="https://github.com/mspnp/AzureNamingTool/blob/main/src/Models/GeneratedName.cs" target="_blank">GeneratedName</a></span> JSON format.
                                        </p>
                                        <p>
                                            <button type="button" class="btn btn-primary" @onclick="@(e => AdminFormAction("samplepost"))" title="Sample Post">Sample Post</button>
                                        </p>
                                    </div>
                                    <div class="mb-3">
                                        <div class="fw-bold">URL</div>
                                        <input title="Generation Webhook" id="currentgenerationwebhook" class="form-control" type="text" @onchange="@((ui) => { SetFormValue("generationwebhook",(string)ui.Value!);})" value="@currentgenerationwebhook" />
                                    </div>
                                    <div>
                                        <button type="button" class="btn btn-success w-auto" @onclick="@(e => AdminFormAction("generationwebhooksave"))" title="Save Generate Webhook">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div>
                @if (!admin)
                {
                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("login"))" title="Login">Login</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    protected ThemeInfo theme { get; set; } = new();
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    [CascadingParameter]
    private IdentityProviderDetails identityProviderDetails { get; set; } = new();
    private ServicesData servicesData = new();
    private string currentpassword = String.Empty;
    private string newpassword = String.Empty;
    private string currentapikey = String.Empty;
    private string currentreadonlyapikey = String.Empty;
    private string currentidentityheadername = String.Empty;
    private string currentidentityprovider = String.Empty;
    private ResponseMessage message = new();
    private bool admin;
    private bool versionalertshown = false;
    private bool disabled = true;
    private bool dismissalert = false;
    private bool duplicatenamesallowed = false;
    private bool connectivitycheckenabled = true;
    private bool resourcetypeeditingallowed = false;
    private bool autoincrementresourceinstance = false;
    private string currentgenerationwebhook = String.Empty;
    private string versionalert = String.Empty;
    private string appversion = String.Empty;
    private SiteConfiguration config = ConfigurationHelper.GetConfigurationData();
    private string currentuser = String.Empty;
    private List<KeyValuePair<string, string>> environmentvariables = new();
    private string releasenotesurl = String.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        currentuser = await IdentityHelper.GetCurrentUser(session);
        if (firstRender)
        {
            appversion = ConfigurationHelper.GetAssemblyVersion();
            releasenotesurl = "https://github.com/mspnp/AzureNamingTool/wiki/v" + appversion;

            servicesData = await ServicesHelper.LoadServicesData(servicesData, true);
            var result = await session.GetAsync<bool>("admin");
            admin = (bool)result.Value;
            if (admin)
            {
                currentapikey = GeneralHelper.DecryptString(config.APIKey!, config.SALTKey!);
                currentreadonlyapikey = GeneralHelper.DecryptString(config.ReadOnlyAPIKey!, config.SALTKey!);
                // Determine if the version notification has been dismissed
                var resultVersionAlert = await session.GetAsync<bool>("versionalert-" + appversion + "-shown");
                versionalertshown = resultVersionAlert.Success ? resultVersionAlert.Value : false;
                versionalert = ConfigurationHelper.GetVersionAlert(true).Result;
                duplicatenamesallowed = Convert.ToBoolean(ConfigurationHelper.GetAppSetting("DuplicateNamesAllowed"));
                connectivitycheckenabled = Convert.ToBoolean(ConfigurationHelper.GetAppSetting("ConnectivityCheckEnabled"));
                resourcetypeeditingallowed = Convert.ToBoolean(ConfigurationHelper.GetAppSetting("ResourceTypeEditingAllowed"));
                autoincrementresourceinstance = Convert.ToBoolean(ConfigurationHelper.GetAppSetting("AutoIncrementResourceInstance"));
                currentgenerationwebhook = ConfigurationHelper.GetAppSetting("GenerationWebhook", true);
                currentidentityheadername = ConfigurationHelper.GetAppSetting("IdentityHeaderName", true);
                if (GeneralHelper.IsNotNull(identityProviderDetails))
                {
                    if (!String.IsNullOrEmpty(identityProviderDetails.CurrentIdentityProvider))
                    {
                        currentidentityprovider = identityProviderDetails.CurrentIdentityProvider;
                    }
                }
                environmentvariables = ConfigurationHelper.GetEnvironmentVariables();
            }

            await storage.SetAsync("apptheme", theme.ThemeStyle);
            state.AppTheme = theme.ThemeStyle;

            StateHasChanged();
        }
    }

    private async void AdminFormAction(string action, int id = 0)
    {
        message = new ResponseMessage();
        message.Header = "INFORMATION";
        message.Type = MessageTypesEnum.INFORMATION;
        ServiceResponse serviceResponse = new();
        bool redirect = false;
        bool confirm = false;
        bool displaymessage = true;

        switch (action)
        {
            case "login":
                // Check the password
                if (currentpassword == GeneralHelper.DecryptString(config.AdminPassword!, config.SALTKey!))
                {
                    state.SetAdmin(true);
                    await session.SetAsync("admin", true);
                    await session.SetAsync("currentuser", "GlobalAdmin");
                    // Load the current API Keys
                    currentapikey = GeneralHelper.DecryptString(config.APIKey!, config.SALTKey!);
                    currentreadonlyapikey = GeneralHelper.DecryptString(config.ReadOnlyAPIKey!, config.SALTKey!);
                    message.Type = MessageTypesEnum.INFORMATION;
                    message.Header = "INFORMATION";
                    message.Message = "Global Admin logged in.";
                    admin = true;
                    redirect = true;
                }
                else
                {
                    state.SetAdmin(false);
                    await session.SetAsync("admin", false);
                    message.Type = MessageTypesEnum.ERROR;
                    message.Header = "ERROR";
                    message.Message = "Login failed!";
                }
                break;
            case "logout":
                state.SetAdmin(false);
                await session.SetAsync("admin", false);
                message.Type = MessageTypesEnum.INFORMATION;
                message.Header = "INFORMATION";
                message.Message = "User Logged out.";
                redirect = true;
                break;
            case "password":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will update the Global Admin Password.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    // Set the new Global admin password
                    serviceResponse = await AdminService.UpdatePassword(newpassword);
                    if (serviceResponse.Success)
                    {
                        message.Type = MessageTypesEnum.SUCCESS;
                        message.Header = "SUCCESS";
                        message.Message = "Global Admin Password updated!";
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem updating the Global Admin Password!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "identityheadernamesave":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will update the Identity Header Name.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminService.UpdateIdentityHeaderName(currentidentityheadername);
                    if (serviceResponse.Success)
                    {
                        message.Type = MessageTypesEnum.SUCCESS;
                        message.Header = "SUCCESS";
                        message.Message = "Identity Header Name updated!";
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem updating the Identity Header Name!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "apikeysave":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will update the Full Access API Key.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminService.UpdateAPIKey(currentapikey, "fullaccess");
                    if (serviceResponse.Success)
                    {
                        message.Type = MessageTypesEnum.SUCCESS;
                        message.Header = "SUCCESS";
                        message.Message = "Full Access API Key updated!";
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem updating the Full Access API Key!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "apikeygenerate":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will generate a new Full Access API Key.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminService.GenerateAPIKey("fullaccess");
                    if (serviceResponse.Success)
                    {
                        if (GeneralHelper.IsNotNull(serviceResponse.ResponseObject))
                        {
                            currentapikey = serviceResponse.ResponseObject!;
                            message.Type = MessageTypesEnum.SUCCESS;
                            message.Header = "SUCCESS";
                            message.Message = "Full Access API Key updated!";
                        }
                        else
                        {
                            message.Type = MessageTypesEnum.ERROR;
                            message.Header = "ERROR";
                            message.Message = "There was a problem generating the Full Access API Key!";
                        }
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem generating the Full Access API Key!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "readonlyapikeysave":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will update the Read-Only API Key.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminService.UpdateAPIKey(currentreadonlyapikey, "readonly");
                    if (serviceResponse.Success)
                    {
                        message.Type = MessageTypesEnum.SUCCESS;
                        message.Header = "SUCCESS";
                        message.Message = "Read-Only API Key updated!";
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem updating the Read-Only API Key!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "readonlyapikeygenerate":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will generate a new Read-Only API Key.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminService.GenerateAPIKey("readonly");
                    if (serviceResponse.Success)
                    {
                        if (GeneralHelper.IsNotNull(serviceResponse.ResponseObject))
                        {
                            currentreadonlyapikey = serviceResponse.ResponseObject!;
                            message.Type = MessageTypesEnum.SUCCESS;
                            message.Header = "SUCCESS";
                            message.Message = "Read-Only API Key updated!";
                        }
                        else
                        {
                            message.Type = MessageTypesEnum.ERROR;
                            message.Header = "ERROR";
                            message.Message = "There was a problem generating the Read-Only API Key!";
                        }
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Header = "ERROR";
                        message.Message = "There was a problem generating the Read-Only API Key!";
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "generationwebhooksave":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will update the Generation Webhook.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    if (!String.IsNullOrEmpty(currentgenerationwebhook))
                    {
                        if (!Uri.IsWellFormedUriString(currentgenerationwebhook, UriKind.Absolute))
                        {
                            message.Header = "ERROR";
                            message.Type = MessageTypesEnum.ERROR;
                            message.Message = "You must enter a valid URL!";
                            break;
                        }
                    }
                    ConfigurationHelper.SetAppSetting("GenerationWebhook", currentgenerationwebhook, true);
                    message.Type = MessageTypesEnum.SUCCESS;
                    message.Header = "SUCCESS";
                    message.Message = "Generation Webhook configuration saved!";
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "clearcache":
                CacheHelper.ClearAllCache();
                message.Type = MessageTypesEnum.SUCCESS;
                message.Header = "SUCCESS";
                message.Message = "Cache cleared!";
                break;
            case "viewcachedata":
                string cachedata = CacheHelper.GetAllCacheData();
                ModalHelper.ShowInformationModal(Modal!, theme, "bg-navcolor", "Cache Data", "<p>This is the current cache data.</p>" + cachedata, "", admin);
                displaymessage = false;
                break;
            case "samplepost":
                string webhookdata = await FileSystemHelper.ReadFile("samplewebhookdata.json", "");
                ModalHelper.ShowInformationModal(Modal!, theme, "bg-navcolor", "Sample Post", "<p>This is a sample Generation Webhook post.</p><code style=\"display: block; white-space: pre-wrap;\">" + webhookdata + "</code>", "", admin);
                displaymessage = false;
                break;
            case "adminuseradd":
                bool added = await ModalHelper.ShowAddModal(Modal!, servicesData, theme, "bg-navcolor", "Add Admin User", "<p>Add an Admin User.</p>", id, "AdminUser", admin, "");
                if (added)
                {
                    servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
                    state.SetNavReload(true);
                    StateHasChanged();
                }
                else
                {
                    displaymessage = false;
                }
                break;
            case "adminuserdelete":
                confirm = await ModalHelper.ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will delete the Admin User.</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", theme);
                if (confirm)
                {
                    serviceResponse = await AdminUserService.DeleteItem(Convert.ToInt32(id));
                    if (serviceResponse.Success)
                    {
                        message.Type = MessageTypesEnum.SUCCESS;
                        message.Message = "Admin User deleted!";
                    }
                    else
                    {
                        message.Type = MessageTypesEnum.ERROR;
                        message.Message = "Admin User deletion failed!";
                        message.MessageDetails = serviceResponse.ResponseMessage;
                    }
                }
                else
                {
                    displaymessage = false;
                }
                break;
        }

        config = ConfigurationHelper.GetConfigurationData();

        if ((GeneralHelper.IsNotNull(message.Message)) && (displaymessage))
        {
            if (!String.IsNullOrEmpty(message.Message))
            {
                switch (message.Type)
                {
                    case MessageTypesEnum.INFORMATION:
                        toastService.ShowInfo(message.Message);
                        break;
                    case MessageTypesEnum.SUCCESS:
                        toastService.ShowSuccess(message.Message);
                        break;
                    case MessageTypesEnum.WARNING:
                        toastService.ShowWarning(message.Message);
                        break;
                    case MessageTypesEnum.ERROR:
                        toastService.ShowError(message.Message);
                        break;
                }
                AdminLogService.PostItem(new AdminLogMessage() { Title = message.Type.ToString(), Message = message.Message, Source = currentuser });
            }
        }


        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
        state.SetNavReload(true);
        StateHasChanged();

        if (redirect)
        {
            if (admin)
            {
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }
            else
            {
                NavigationManager.NavigateTo("/", true);
            }
        }

    }

    private void SetFormValue(string type, string value)
    {
        switch (type)
        {
            case "login":
                currentpassword = value;
                break;
            case "password":
                newpassword = value;
                // Validate the password complexity
                if (ValidationHelper.ValidatePassword(newpassword))
                {
                    disabled = false;
                }
                else
                {
                    disabled = true;
                }
                break;
            case "identityheadername":
                currentidentityheadername = value;
                break;
            case "apikey":
                currentapikey = value;
                break;
            case "readonlyapikey":
                currentreadonlyapikey = value;
                break;
            case "generationwebhook":
                currentgenerationwebhook = value;
                break;
        }
    }

    private async void SettingChanged(ChangeEventArgs e, string setting)
    {
        message = new ResponseMessage();
        message.Header = "INFORMATION";
        message.Type = MessageTypesEnum.INFORMATION;
        try
        {
            if (GeneralHelper.IsNotNull(e.Value))
            {
                switch (setting)
                {
                    case "duplicatenamesallowed":
                        ConfigurationHelper.SetAppSetting("DuplicateNamesAllowed", e.Value.ToString()!);
                        message.Message = "Duplicate Names Allowed setting updated to " + e.Value.ToString()!.ToUpper() + "!";
                        break;
                    case "connectivitycheckenabled":
                        ConfigurationHelper.SetAppSetting("ConnectivityCheckEnabled", e.Value.ToString()!);
                        message.Message = "Connectivity Check Enabled setting updated to " + e.Value.ToString()!.ToUpper() + "!";
                        // Update the tool connection setting to true, if the connecvity check is disabled. This will cause the stie to always assume there is connectivity and attempt external connections.
                        if (!(bool)e.Value)
                        {
                            CacheHelper.SetCacheObject("isconnected", true);
                        }
                        else
                        {
                            CacheHelper.InvalidateCacheObject("isconnected");
                        }
                        if (!(bool)e.Value)
                        {
                            ModalHelper.ShowInformationModal(Modal!, theme, "bg-danger", "ATTENTION", "<p>Disabling this setting may result in connectivity errors being logged to the Admin Log.<p>", "", admin);
                        }

                        break;
                    case "resourcetypeeditingallowed":
                        if (GeneralHelper.IsNotNull(e.Value))
                        {
                            ConfigurationHelper.SetAppSetting("ResourceTypeEditingAllowed", e.Value!.ToString() ?? "");
                            message.Message = "Resource Type Editing Allowed setting updated to " + e.Value?.ToString()!.ToUpper() ?? "" + "!";
                            if ((bool)e.Value!)
                            {
                                ModalHelper.ShowInformationModal(Modal!, theme, "bg-danger", "ATTENTION", "<p>Disabling this setting may result in name generation that will fail regex validation for the resource type.</p><p>Please use caution when editing Resource Type validation settings.", "", admin);
                            }
                        }
                        break;
                    case "autoincrementresourceinstance":
                        if (GeneralHelper.IsNotNull(e.Value))
                        {
                            ConfigurationHelper.SetAppSetting("AutoIncrementResourceInstance", e.Value!.ToString() ?? "");
                            message.Message = "Auto Increment Resource Instance setting updated to " + e.Value?.ToString()!.ToUpper() ?? "" + "!";
                        }
                        break;
                }
                message.Type = MessageTypesEnum.SUCCESS;
                message.Header = "SUCCESS";
            }
            else
            {
                message.Message = "There was a problem updating the setting!";
                message.Header = "ERROR";
            }
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
            message.Message = "There was a problem updating the setting!";
            message.Header = "ERROR";
        }

        if (GeneralHelper.IsNotNull(message.Message))
        {
            switch (message.Type)
            {
                case MessageTypesEnum.INFORMATION:
                    toastService.ShowInfo(message.Message);
                    break;
                case MessageTypesEnum.SUCCESS:
                    toastService.ShowSuccess(message.Message);
                    break;
                case MessageTypesEnum.WARNING:
                    toastService.ShowWarning(message.Message);
                    break;
                case MessageTypesEnum.ERROR:
                    toastService.ShowError(message.Message);
                    break;
            }
            AdminLogService.PostItem(new AdminLogMessage() { Title = message.Type.ToString(), Message = message.Message, Source = currentuser });
        }

        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
        state.SetNavReload(true);
        StateHasChanged();
    }

    private async Task OnConfigurationAlertDismissed()
    {
        await session.SetAsync("versionalert-" + appversion + "-shown", true);
        if (dismissalert)
        {
            ConfigurationHelper.DismissVersionAlert();
        }
    }

    private async void SubmitIssue(string type)
    {
        string issueURL = "";
        switch (type)
        {
            case "bug":
                issueURL = "https://github.com/mspnp/AzureNamingTool/issues/new?assignees=&labels=&projects=&template=bug_report.md&title=";
                break;
            case "feature":
                issueURL = "https://github.com/mspnp/AzureNamingTool/issues/new?assignees=&labels=&projects=&template=feature_request.md&title=";
                break;

        }
        if (!String.IsNullOrEmpty(issueURL))
        {
            await JsRuntime.InvokeVoidAsync("open", issueURL, "_blank");
        }
    }
}
